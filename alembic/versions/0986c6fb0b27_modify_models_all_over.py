"""modify models all over

Revision ID: 0986c6fb0b27
Revises: 9c8dcbe11a51
Create Date: 2025-03-28 12:43:15.817962

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0986c6fb0b27'
down_revision: Union[str, None] = '9c8dcbe11a51'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('emails',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('recipient', sa.String(length=255), nullable=False),
    sa.Column('sender', sa.String(length=255), nullable=False),
    sa.Column('subject', sa.String(length=255), nullable=False),
    sa.Column('body', sa.String(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=True),
    sa.Column('sent', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('events', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    conn = op.get_bind()

    tables = ['business_sources', 'source_contacts', 'business_contacts']
    for table_name in tables:
        result = conn.execute(sa.text(f"""
                                    SELECT constraint_name
                                    FROM information_schema.table_constraints
                                    WHERE table_name = '{table_name}'
                                    AND constraint_type = 'PRIMARY KEY'
                                    """))
        constraints = [row[0] for row in result]

        for constraint in constraints:
            op.drop_constraint(constraint, table_name, type_='primary')
            print(f"Dropped constraint {constraint} from {table_name}")

    op.add_column('business_contacts', sa.Column('id', sa.UUID(), nullable=True))
    op.add_column('business_sources', sa.Column('id', sa.UUID(), nullable=True))
    op.add_column('source_contacts', sa.Column('id', sa.UUID(), nullable=True))

    conn.execute(sa.text("UPDATE business_sources SET id = gen_random_uuid()"))
    op.alter_column('business_sources', 'id', nullable=False)
    op.create_primary_key('pk_business_sources', 'business_sources', ['id'])
    op.create_index(op.f('ix_business_sources_id'), 'business_sources', ['id'], unique=False)

    conn.execute(sa.text("UPDATE source_contacts SET id = gen_random_uuid()"))
    op.alter_column('source_contacts', 'id', nullable=False)
    op.create_primary_key('pk_source_contacts', 'source_contacts', ['id'])
    op.create_index(op.f('ix_source_contacts_id'), 'source_contacts', ['id'], unique=False)

    conn.execute(sa.text("UPDATE business_contacts SET id = gen_random_uuid()"))
    op.alter_column('business_contacts', 'id', nullable=False)
    op.create_primary_key('pk_business_contacts', 'business_contacts', ['id'])
    op.create_index(op.f('ix_business_contacts_id'), 'business_contacts', ['id'], unique=False)

    op.create_unique_constraint(None, 'zip_codes', ['zip'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'zip_codes', type_='unique')
    op.drop_column('source_contacts', 'id')
    op.drop_column('business_sources', 'id')
    op.drop_column('business_contacts', 'id')
    op.drop_table('emails')
    # ### end Alembic commands ###
